name: Django CI/CD

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17.4
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 5432:5432

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --no-root

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -U ${{ secrets.DB_USER }}; 
          do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run migrations
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          NAME: test_db
          USER: ${{ secrets.DB_USER }}
          PASSWORD: ${{ secrets.DB_PASSWORD }}
          HOST: localhost
        run: poetry run python manage.py migrate

      - name: Run tests
        run: poetry run python manage.py test

  build:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }} .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_KEY }}@${{ secrets.SERVER_IP }} << EOF
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
            docker stop myapp || true
            docker rm myapp || true
            docker run -d --name myapp -p 80:8000 ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
          EOF
